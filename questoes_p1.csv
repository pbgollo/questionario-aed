Quais são os elementos que compõem uma estrutura de dados?;A linguagem de programação e o propósito do programa.;Os dados a representar e as operações associadas.;O número de linhas de código e o tamanho do arquivo.;A quantidade de memória disponível e a velocidade do processador.;O número de usuários e o feedback do cliente.;B
Qual é a importância de se considerar os custos e benefícios ao escolher uma estrutura de representação de dados?;Não há custos associados à escolha de uma estrutura de dados.;Para garantir que o programa seja o mais complicado possível.;Para garantir que o programa seja o mais simples possível.;Para tomar decisões informadas e eficientes durante o processo de desenvolvimento.;Para aumentar a popularidade do programa.;D
O que é um Tipo Abstrato de Dados (TAD)?;Uma linguagem de programação moderna.;Um tipo de dados apenas disponível em linguagens antigas.;Um tipo de dados definido apenas em termos de um tipo e um conjunto de operações sobre aquele tipo.;Um tipo de dados que não pode ser utilizado em programas de computador.;Um tipo de dados que não pode ser representado em computadores modernos.;C
Por que é importante considerar a utilização da memória principal de forma eficiente durante o desenvolvimento de programas?;Para aumentar o tempo de execução do programa.;Para tornar o programa mais complicado.;Para garantir que o programa utilize toda a memória disponível.;Para garantir que o programa seja o mais eficiente possível.;Para reduzir a velocidade de processamento do programa.;D
Qual é o principal objetivo do processo de abstração no desenvolvimento de programas de computador?;Tornar o programa mais lento.;Tornar o programa mais complicado.;Analisar um problema real e representá-lo através de um programa de computador.;Aumentar a complexidade do programa.;Tornar o programa mais simples.;C
Por que um TAD é considerado um exemplo de encapsulamento?;Porque esconde os detalhes de implementação e define apenas as operações sobre aquele tipo de dados.;Porque torna os programas mais lentos.;Porque torna os programas mais complicados.;Porque dificulta a compreensão dos programas pelos usuários.;Porque aumenta a complexidade dos programas.;A
O que caracteriza a alocação de memória estática em programas?;Alocação de memória que não pode ser modificada durante a execução do programa.;Alocação de memória que é ajustada automaticamente conforme a necessidade do programa.;Alocação de memória que é exclusivamente usada para armazenar variáveis locais.;Alocação de memória que é feita apenas para variáveis globais.;Alocação de memória que é feita somente para listas encadeadas.;A
Quais são as principais características da alocação de memória dinâmica em programas?;Alocação de memória que é definida em tempo de compilação.;Alocação de memória que é estática e não pode ser modificada.;Alocação de memória que permite ajustes durante a execução do programa.;Alocação de memória que é feita apenas para variáveis globais.;Alocação de memória que é feita somente para vetores.;C
Por que a alocação de memória dinâmica é vantajosa em comparação com a alocação de memória estática?;Porque permite ajustes na quantidade de memória necessária durante a execução do programa.;Porque é mais simples de implementar.;Porque consome menos recursos do sistema.;Porque reduz a complexidade do código fonte.;Porque garante que não haverá vazamento de memória.;A
O que caracteriza uma lista?;Sequência infinita de itens de dados.;Sequência finita de itens de dados, onde os elementos podem estar ordenados ou não.;Sequência finita de itens de dados, onde os elementos estão sempre ordenados.;Sequência de itens de dados que não podem ser modificados.;Sequência de itens de dados onde todos os elementos são do mesmo tipo.;B
Qual é a característica principal da implementação de listas através de vetores?;Uso de referências para acessar elementos sequenciais de memória.;Ocupação de espaços não contíguos de memória.;Alocação dinâmica de memória para crescer ou diminuir.;Acesso randômico aos elementos.;Dimensionamento com um número máximo de elementos.;E
Como funciona a implementação de listas encadeadas em comparação com vetores?;Os elementos estão em sequência na memória.;Cada elemento tem a referência do próximo elemento.;Alocação estática de memória.;Permitem acesso randômico aos elementos.;São dimensionadas com um número máximo de elementos.;B
O que representa cada nó em uma lista encadeada?;A informação armazenada e o tamanho do nó.;O ponteiro para o próximo elemento e o valor do elemento.;O endereço de memória e o tamanho do elemento.;O tipo de dado e a posição na lista.;O índice do elemento e a ordem de inserção.;B
Quais são as duas abordagens básicas de implementação de listas?;Através de matrizes e estruturas complexas.;Através de arrays e pilhas.;Através de vetores e listas encadeadas.;Através de filas e árvores.;Através de conjuntos e dicionários.;C
Qual é o conceito de lista ordenada?;Uma lista onde os elementos são posicionados em ordem de inserção.;Uma lista onde os elementos estão dispostos aleatoriamente.;Uma lista onde os elementos são encapsulados.;Uma lista onde há relação entre os valores e as posições.;Uma lista onde os elementos são removidos na ordem em que foram inseridos.;D
Por que a implementação de listas encadeadas é preferível em situações onde o tamanho da lista pode variar frequentemente?;Porque permitem crescimento e diminuição dinâmica da lista.;Porque ocupam menos espaço de memória.;Porque permitem acesso randômico aos elementos.;Porque são mais fáceis de implementar.;Porque são mais eficientes em termos de processamento.;A
O que caracteriza uma função recursiva?;Uma função que executa apenas uma vez.;Uma função que contém um loop infinito.;Uma função que chama a si mesma dentro do seu código.;Uma função que não pode ser implementada em linguagens de programação modernas.;Uma função que consome menos espaço de memória.;C
Por que as funções recursivas são consideradas computacionalmente elegantes?;Porque são mais lentas que as funções com repetição.;Porque ocupam menos espaço na memória.;Porque permitem implementações mais compactas.;Porque são mais fáceis de depurar.;Porque são mais rápidas que as funções com repetição.;C
Quais são as desvantagens das funções recursivas em comparação com as funções com repetição?;São mais rápidas e ocupam menos espaço na memória.;São mais lentas e ocupam mais espaço na memória.;São mais fáceis de depurar e consomem menos recursos do sistema.;São menos flexíveis e mais difíceis de entender.;Todas as anteriores.;B
Qual é o propósito do comando de parada em uma função recursiva?;Evitar que a função entre em loop infinito.;Alocar mais espaço na memória.;Garantir que a função seja executada apenas uma vez.;Aumentar o desempenho da função.;Controlar a quantidade de recursões realizadas.;A
Onde uma função recursiva aloca sua execução na memória do sistema?;Na pilha.;No heap.;Na memória estática.;Na memória dinâmica.;No cache.;A
Qual é a principal diferença entre uma lista encadeada simples e uma lista encadeada dupla?;A lista encadeada simples permite acesso aos elementos de forma bidirecional.;A lista encadeada simples possui apenas uma referência para o próximo elemento, enquanto a lista encadeada dupla possui referências para o próximo e o anterior.;A lista encadeada simples possui referências para o próximo e o anterior, enquanto a lista encadeada dupla possui apenas uma referência para o próximo elemento.;A lista encadeada simples possui um número variável de elementos, enquanto a lista encadeada dupla possui um número fixo de elementos.;Não há diferença entre elas.;B
Como são representados os elementos em uma lista encadeada dupla?;Cada elemento possui uma referência apenas para o próximo elemento.;Cada elemento possui uma referência para o próximo e o anterior.;Cada elemento possui uma referência apenas para o elemento anterior.;Cada elemento possui uma referência apenas para o primeiro elemento.;Cada elemento possui uma referência apenas para o último elemento.;B
Por que as listas encadeadas duplas são chamadas de bidirecionais?;Porque permitem acesso aos elementos apenas em uma direção.;Porque permitem acesso aos elementos apenas nas extremidades.;Porque possuem referências para os elementos anterior e posterior.;Porque ocupam menos espaço na memória.;Porque são mais rápidas que as listas encadeadas simples.;C
O que é um header em uma estrutura de dados de lista?;Um elemento especial mantido para armazenar informações importantes da lista.;Um tipo de dado utilizado apenas em linguagens de programação interpretadas.;Um nodo que contém a média de todos os elementos da lista.;Um nodo que é o último elemento da lista.;Um elemento que não possui nenhuma informação.;A
Quais são os benefícios de utilizar um header em uma lista encadeada?;Complicar a implementação de operações na lista.;Reduzir a eficiência da lista.;Tornar o código menos legível.;Facilitar a manipulação e o acesso aos elementos na lista.;Aumentar a complexidade da lista.;D
Por que o header pode melhorar a eficiência na manipulação de listas?;Porque aumenta o número de verificações repetitivas.;Porque simplifica a implementação de operações na lista.;Porque torna o código menos legível.;Porque dificulta o acesso aos elementos da lista.;Porque ocupa mais espaço na memória.;B
O que caracteriza uma pilha em termos de políticas de acesso?;Inserções no final e remoções no início.;Inserções e remoções sempre no mesmo lado, seguindo a política Last In First Out (LIFO).;Inserções no início e remoções no final.;Inserções e remoções seguindo a política First In First Out (FIFO).;Inserções e remoções sempre no mesmo lado, seguindo a política First In First Out (FIFO).;B
Quais são as operações básicas em uma pilha?;Enfileirar e desenfileirar.;Empilhar e desempilhar.;Inserir e remover.;Inserir no final e remover do início.;Inserir no início e remover do final.;B
Como é caracterizada a política de acesso em uma fila?;Inserções no final e remoções no início, seguindo a política First In First Out (FIFO).;Inserções e remoções sempre no mesmo lado, seguindo a política Last In First Out (LIFO).;Inserções no início e remoções no final.;Inserções e remoções seguindo a política Last In First Out (LIFO).;Inserções e remoções sempre no mesmo lado, seguindo a política First In First Out (FIFO).;A
Quais são as operações básicas em uma fila?;Empilhar e desempilhar.;Enfileirar e desenfileirar.;Inserir e remover.;Inserir no final e remover do início.;Inserir no início e remover do final.;B
O que é um deque?;Uma forma restrita de lista que permite apenas operações de inserção no início e remoção no final.;Uma forma restrita de lista que permite apenas operações de inserção e remoção no final.;Uma forma restrita de lista que permite apenas operações de inserção e remoção no início.;Uma forma de lista que permite operações de inserção e remoção em ambas as extremidades.;Um tipo de lista que só permite acesso aos elementos no início.;D
O que caracteriza um deque com entrada restrita?;Permite operações de remoção em ambas as extremidades, mas restringe as operações de inserção a apenas uma extremidade.;Permite operações de inserção e remoção apenas no início.;Permite operações de inserção em ambas as extremidades, mas restringe as operações de remoção a apenas uma extremidade.;Permite operações de remoção apenas no final.;Permite operações de inserção apenas no final, mas restringe as operações de remoção a apenas uma extremidade.;C
Qual é o propósito de uma multilista?;Permitir uma representação mais flexível de dados em várias dimensões.;Permitir uma representação mais flexível de dados em uma única dimensão.;Facilitar a implementação de operações em listas.;Facilitar a implementação de operações em matrizes esparsas.;Facilitar a implementação de operações em filas.;A
O que caracteriza uma matriz esparsa?;Uma matriz que possui uma grande quantidade de elementos relevantes.;Uma matriz que possui uma grande quantidade de elementos que valem zero ou não estão presentes.;Uma matriz que possui apenas elementos em uma única dimensão.;Uma matriz que possui apenas elementos associados a listas encadeadas.;Uma matriz que possui apenas elementos associados a pilhas.;B